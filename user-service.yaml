openapi: 3.0.3
info:
  title: API Specification for User-Service
  description: API Specification for User-Service
  version: 1.0.0
servers:
  - url: 'http://localhost:8083/api/users'
tags:
  - name: Users
    description: Users saved within the user service
paths:
  /:
    get:
      description: |
        Returns all Users saved within the user service
      tags:
        - Users
      responses:
        '200':
          description: List of Users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfUsers'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

    post:
      description: Creates a new User
      tags:
        - Users
      requestBody:
        description: userDTO
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: Created User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: Conflict while creating User
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

  /{id}:
    get:
      description: Get user of the given id
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
      responses:
        '200':
          description: User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: user not found
        default:
          description: unexpected error
          content:
           application/json:
              schema:
                type: string

    put:
      description: Update user of the given id
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
      requestBody:
        description: UserDTO
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '200':
          description: Updated User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '409':
          description: Conflict while updating User
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

    delete:
      description: Delete user of the given id
      tags:
        - Users
      parameters:
        - name: id
          in: path
          description: ID of user
          required: true
          schema:
            type: string
            format: uuid
            example: 'e86c57cb-d703-4f39-9632-3782cb5500e8'
      responses:
        '204':
          description: Successfully deleted user
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                type: string

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        name:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
        createTime:
          type: string
          format: date-time
        globalRole:
          type: string
        lastLogin:
          type: string
          format: date-time

    ArrayOfUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'

    UserDTO:
      type: object
      required:
        - username
        - name
        - lastName
        - email
        - dateOfBirth
        - globalRole
      properties:
          username:
            type: string
          name:
            type: string
          lastName:
            type: string
          email:
            type: string
            format: email
          dateOfBirth:
            type: string
            format: date
            example: 05.05.2005
          globalRole:
            type: string
